{
  "hash": "38ef20af108e1138ebfa0761cc8aaa2a",
  "result": {
    "engine": "knitr",
    "markdown": "<!-- README.md is generated from README.Rmd. Please edit that file -->\n\n\n\n\n\n# quartomonothemer\n\n<!-- badges: start -->\n<!-- badges: end -->\n\n<img src=\"man/figures/quartomonothemer.gif\" width=\"100%\">\n\n\nThis package provides custom Quarto Revealjs, `ggplot2`, and  `gt` themes.\nThis work is strongly influenced by [xaringanthemer](https://pkg.garrickadenbuie.com/xaringanthemer/),\nbut supports only limited features.\n\nYou can find more examples [here](https://github.com/kazuyanagimoto/quarto-slides-example)\n\n## Installation\n\nYou can install the development version of quartomonothemer from [GitHub](https://github.com/) with:\n\n``` r\n# install.packages(\"remotes\")\nremotes::install_github(\"kazuyanagimoto/quartomonothemer\")\n```\n\n## Example\n\nFirst, add `custom.scss` file to the YAML header.\n\n``` yaml\nformat:\n  revealjs:\n    theme: custom.scss\n```\n\nThen, run `style_mono_quarto()` inside of the slide qmd file. It produces the `quartomonothemer.scss`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(quartomonothemer)\nlibrary(showtext)\n\nfont_title <- \"Josefin Sans\"\nfont_text <- \"Montserrat\"\nfont_sans <- \"Noto Sans\" \ncolor_base <- \"#009F8C\"\ncolor_base_light <- \"#95DFD6\"\ncolor_accent <- \"#B75C9D\"\ncolor_accent_light <- \"#DBA6CC\"\ngray <- \"#bebebe\"\ndarkgray <- \"#6d6d6d\"\n\nfont_add_google(font_title)\nfont_add_google(font_text)\nshowtext_auto()\n\nstyle_mono_quarto(\n  font_title = font_title,\n  font_text = font_text,\n  font_sans = font_sans,\n  color_base = color_base,\n  color_accent = color_accent,\n  color_link = color_accent,\n  color_code = color_base,\n  size_base = 30,\n  path_scss = \"quartomonothemer.scss\"\n)\n```\n:::\n\n\nThis package also provide `theme_quarto()` based on the title and text fonts,\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(palmerpenguins)\nlibrary(tidyverse)\npenguins |>\n  ggplot(aes(x = flipper_length_mm, y = bill_length_mm,\n             color = species, shape = species)) +\n  geom_point(size = 3) +\n  scale_color_manual(values = c(color_base, color_base_light, darkgray)) +\n  labs(x = \"Flipper Length (mm)\", y = \"Bill Length (mm)\") +\n  theme_quarto() +\n  theme(legend.position = c(0.9, 0.1))\n```\n:::\n\n\nand `gt_theme_quarto()` as a `gt` theme!\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(gt)\npenguins |>\n  filter(!is.na(sex)) |>\n  group_by(species, sex) |>\n  summarize(bill_length = mean(bill_length_mm, na.rm = TRUE),\n            .groups = \"drop\") |>\n  pivot_wider(names_from = \"sex\", values_from = \"bill_length\",\n              names_prefix = \"bill_length_\") |>\n  mutate(ratio_bar = 100 * bill_length_female / bill_length_male,\n         ratio = ratio_bar / 100) |>\n  gt(rowname_col = \"species\") |>\n  cols_label(bill_length_female = \"Female\", bill_length_male = \"Male\",\n             ratio_bar = \"Female/Male\", ratio = \"Pct.\") |>\n  fmt_number(columns = starts_with(\"bill_length\"), decimals = 1) |>\n  fmt_percent(ratio, decimals = 0) |>\n  gt_plt_bar_pct(ratio_bar, fill = color_base, scaled = TRUE) |>\n  gt_theme_quarto()\n```\n:::\n\n\n\nNote that it does not provide any color maps. You need to specify by `scale_*_manual()`\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}